/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        fstring: fstring {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp P &kp R &kp I &kp N &kp T &kp LPAR &kp F &kp SQT &kp LEFT_BRACE &kp RBRC &kp SQT &kp RPAR &kp LEFT &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "FSTRING";
        };
    };

    behaviors {
        tapprefer: tapprefer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPPREFER";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 2 ESCAPE      &lt 3 Q             &kp W  &kp E             &kp R               &kp T                &kp Y                 &kp U       &kp I               &kp O    &kp P                &mt UNDERSCORE MINUS
&kp TAB           &mt LEFT_ALT A      &kp S  &kp D             &mt LEFT_ALT F      &kp G                &kp H                 &lt 3 J     &kp K               &kp L    &mt LEFT_SHIFT SEMI  &kp SQT
&lt 1 DOWN_ARROW  &mt LEFT_CONTROL Z  &kp X  &kp C             &kp V               &kp B                &kp N                 &kp M       &kp COMMA           &kp DOT  &kp FSLH             &mt PLUS EQUAL
                                             &mt LEFT_ALT DEL  &mt LEFT_GUI ENTER  &mt F13 BACKSPACE    &mt LEFT_SHIFT SPACE  &lt 3 LBKT  &mt RIGHT_ALT RBKT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp DOLLAR             &kp PERCENT     &kp CARET             &kp AMPERSAND          &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&kp GRAVE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3          &kp NUMBER_4           &kp NUMBER_5    &kp NUMBER_6          &kp NUMBER_7           &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp BACKSLASH
&kp LSHFT  &bt BT_CLR_ALL   &bt BT_NXT    &bt BT_PRV            &bt BT_SEL 0           &bt BT_SEL 1    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LBKT      &kp RBKT              &kp LS(LBRC)           &kp LS(RBRC)
                                          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SPACE       &kp RET               &trans                 &kp RALT
            >;
        };

        layer_2 {
            bindings = <
&kp RA(RS(Q))  &kp LBKT      &kp RBKT      &kp LS(PIPE)  &trans      &trans    &kp N7  &kp N8   &kp N9    &kp LS(LPAR)  &kp LS(RPAR)       &kp ESC
&kp RA(RS(A))  &kp LS(LPAR)  &kp LS(RPAR)  &kp BSLH      &trans      &trans    &kp N4  &kp N5   &kp N6    &kp MINUS     &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE
&trans         &kp LS(LBRC)  &kp LS(RBRC)  &kp FSLH      &trans      &trans    &kp N1  &kp N2   &kp N3    &kp LS(PLUS)  &kp ASTERISK       &kp FSLH
                                           &trans        &kp DELETE  &trans    &kp N0  &kp DOT  &kp BSPC
            >;
        };

        layer_3 {
            bindings = <
&kp LS(LA(LEFT))  &kp LA(LEFT)        &kp UP_ARROW   &kp LA(RIGHT)  &kp LA(LS(RIGHT))  &kp LC(K_SCROLL_UP)    &trans             &kp LS(LA(LC(W)))  &trans             &trans  &trans  &trans
&kp LS(LEFT)      &kp LEFT            &kp DOWN       &kp RIGHT      &kp LS(RIGHT)      &kp K_SCROLL_DOWN      &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &trans  &trans  &trans
&kp LG(LS(LEFT))  &kp LG(LEFT_ARROW)  &kp PAGE_DOWN  &kp LG(RIGHT)  &kp LG(LS(RIGHT))  &trans                 &trans             &trans             &trans             &trans  &trans  &trans
                                                     &trans         &trans             &kp LG(TAB)            &trans             &trans             &trans
            >;
        };
    };
};
